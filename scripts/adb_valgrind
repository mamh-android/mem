#!/bin/bash
# Usage: adb_valgrind system_server
. $(dirname "$0")/common.sh

SERVICE=0
CLEAN_VALGRIND=0
STOP_VALGRIND=0
VALGRIND_TARGET_BINARY=/data/local/Inst/bin/valgrind
#VALGRIND_TARGET_BINARY=/system/bin/valgrind
MEMCHECK_SCRIPT=/data/valgrind_memcheck

pid()
{
    local EXE="$1";
    if [ "$EXE" ]; then
        local PID=$(adb shell ps | fgrep "$1" | sed -e 's/[^ ]* *\([0-9]*\).*/\1/');
        echo "$PID";
    else
        echo "usage: pid name";
    fi
}

usage()
{
    echo "$0 <[--service] <process_or_service_name> | --stop | --clean>"
    echo "Options:"
    echo "  --service   Run valgrind on Android service (listed in init.rc, need different property settings and also need to reboot board)"
    echo "  --stop      Stop valgrind to retrieve memory issues report"
    echo "  --clean     Disable valgrind on for all services (by removing corresponding properties)"
    echo
    echo "Sample process names:"
    echo "  system_server, com.android.systemui, com.example.helloworld, etc."
    echo "Sample service names:"
    echo "  media, healthd, "
}


if [ "$1" == "-h" -o "$1" == "--help" -o "$1" == "" ]; then
    usage
    exit 1
fi

if [ "$1" == "--service" ]; then
    SERVICE=1
    shift
elif [ "$1" == "--clean" ]; then
    CLEAN_VALGRIND=1
elif [ "$1" == "--stop" ]; then
    STOP_VALGRIND=1
fi

# Do preparations
adb_root
sleep 1
adb shell chmod 777 /data/local/tmp

if [ $CLEAN_VALGRIND -eq 1 ]; then
    adb shell 'rm /data/property/persist.wrap.svc.*' > /dev/null
    exit 0
fi

if [ $STOP_VALGRIND -eq 1 ]; then
    adb shell kill -2 $(pid valgrind)
    exit 0
fi

adb shell "echo '
#!/system/bin/sh
logwrapper $VALGRIND_TARGET_BINARY --leak-check=full --trace-children=yes --show-reachable=yes --track-origins=yes \$*
' > $MEMCHECK_SCRIPT"
adb shell chmod 777 $MEMCHECK_SCRIPT

if [ $SERVICE -eq 1 ]; then
    adb shell setprop persist.wrap.svc."$1" $MEMCHECK_SCRIPT
    sleep 1
    adb shell reboot
else # Normal processes
    adb shell setprop wrap."$1" $MEMCHECK_SCRIPT

    if [ "$1" == "system_server" -o "$1" == "com.android.systemui" ]; then
        adb shell stop
        sleep 4
        adb shell start
    else
        #proc_pid=$(pid "$1")
        adb shell am force-stop "$1"
        sleep 4
        adb shell am start "$1"
    fi
fi
